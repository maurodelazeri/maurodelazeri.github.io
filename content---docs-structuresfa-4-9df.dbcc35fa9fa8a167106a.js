(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{120:function(e,t,n){"use strict";n.d(t,"a",function(){return s}),n.d(t,"b",function(){return u});var r=n(0),i=n.n(r),o=i.a.createContext({}),a=function(e){var t=i.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},s=function(e){var t=a(e.components);return i.a.createElement(o.Provider,{value:t},e.children)};var d="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},p=function(e){var t=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,s=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===t.indexOf(r)&&(n[r]=e[r]);return n}(e,["components","mdxType","originalType","parentName"]),d=a(t),p=n,u=d[o+"."+p]||d[p]||l[p]||r;return t?i.a.createElement(u,Object.assign({},s,{components:t})):i.a.createElement(u,s)};function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,a[1]=s;for(var u=2;u<o;u++)a[u]=n[u];return i.a.createElement.apply(null,a)}return i.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},95:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",function(){return a}),n.d(t,"rightToc",function(){return s}),n.d(t,"default",function(){return p});n(0);var r=n(120);function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var a={id:"structures",title:"Structures",hide_title:!0,sidebar_label:"Structures"},s=[{value:"Structures",id:"structures",children:[]},{value:"Trades",id:"trades",children:[{value:"TradeRequest",id:"traderequest",children:[]},{value:"TradeResponse",id:"traderesponse",children:[]}]},{value:"Orders",id:"orders",children:[{value:"Order",id:"order",children:[]},{value:"OrderRequest",id:"orderrequest",children:[]},{value:"OrderResponse",id:"orderresponse",children:[]}]},{value:"Positions",id:"positions",children:[{value:"Position",id:"position",children:[]},{value:"PositionsRequest",id:"positionsrequest",children:[]},{value:"PositionsResponse",id:"positionsresponse",children:[]}]},{value:"Deals",id:"deals",children:[{value:"Deal",id:"deal",children:[]},{value:"DealRequest",id:"dealrequest",children:[]},{value:"DealResponse",id:"dealresponse",children:[]}]},{value:"Events",id:"events",children:[{value:"Calculate",id:"calculate",children:[]},{value:"CalculateRequest",id:"calculaterequest",children:[]},{value:"Ticker",id:"ticker",children:[]},{value:"TickerRequest",id:"tickerrequest",children:[]},{value:"Trade",id:"trade",children:[]},{value:"TradeVenueRequest",id:"tradevenuerequest",children:[]},{value:"Orderbook",id:"orderbook",children:[]},{value:"OrderbookRequest",id:"orderbookrequest",children:[]},{value:"TradeTransaction",id:"tradetransaction",children:[]},{value:"TradeTransactionRequest",id:"tradetransactionrequest",children:[]}]}],d={rightToc:s},l="wrapper";function p(e){var t=e.components,n=o(e,["components"]);return Object(r.b)(l,i({},d,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"structures"},"Structures"),Object(r.b)("h2",{id:"trades"},Object(r.b)("inlineCode",{parentName:"h2"},"Trades")),Object(r.b)("h3",{id:"traderequest"},"TradeRequest"),Object(r.b)("p",null,"Interaction between the client and a trade server for executing the order placing operation is performed by using trade requests. The trade request is represented by the special predefined protobuf message of ",Object(r.b)("inlineCode",{parentName:"p"},"TradeRequest")," type, which contain all the fields necessary to perform trade deals. ",Object(r.b)("inlineCode",{parentName:"p"},"TradeRequest")," is used by ",Object(r.b)("a",i({parentName:"p"},{href:"trades#buy"}),Object(r.b)("inlineCode",{parentName:"a"},"Buy()")),", ",Object(r.b)("a",i({parentName:"p"},{href:"trades#sell"}),Object(r.b)("inlineCode",{parentName:"a"},"Sell()")),", ",Object(r.b)("a",i({parentName:"p"},{href:"trades#buylimit"}),Object(r.b)("inlineCode",{parentName:"a"},"BuyLimit()")),", ",Object(r.b)("a",i({parentName:"p"},{href:"trades#selllimit"}),Object(r.b)("inlineCode",{parentName:"a"},"SellLimit()")),", ",Object(r.b)("a",i({parentName:"p"},{href:"trades#buystop"}),Object(r.b)("inlineCode",{parentName:"a"},"BuyStop()")),", ",Object(r.b)("a",i({parentName:"p"},{href:"trades#sellstop"}),Object(r.b)("inlineCode",{parentName:"a"},"SellStop()")),". Each function uses specific fields and if not specified it uses the default value specified on ",Object(r.b)("a",i({parentName:"p"},{href:"trades"}),Object(r.b)("inlineCode",{parentName:"a"},"Trades Documentation")),". Any extra field specified that is not necessary is ignored."),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-protobuf"}),"message TradeRequest {\n    string                         token            = 1;  // Token to authenticate\n    bool                           asynchronous     = 2;  // Asynchronous execution\n    string                         venue            = 3;  // Trade Venue\n    string                         product          = 4;  // Trade Product\n    double                         volume           = 5;  // Requested volume for a deal in lots\n    double                         price            = 6;  // Price\n    double                         sl               = 7;  // Stop Loss level of the order\n    double                         tp               = 8;  // Take Profit level of the order\n    double                         deviation        = 9;  // Maximal possible deviation from the requested price\n    ENUM_ORDER_TYPE                type             = 10; // Order type\n    ENUM_ORDER_TYPE_FILLING        type_filling     = 11; // Order execution type\n    ENUM_ORDER_TYPE_TIME           type_time        = 12; // Order expiration type\n    int64                          expiration       = 13; // Order expiration time (for the orders of ORDER_TIME_SPECIFIED type)\n    string                         comment          = 14; // Order comment\n};\n")),Object(r.b)("h3",{id:"traderesponse"},"TradeResponse"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"As result of a trade request, a trade server returns data about the trade request processing result as a special predefined protobuf message of ",Object(r.b)("inlineCode",{parentName:"p"},"TradeResponse")," type.")),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-protobuf"}),"message TradeResponse {\n    ENUM_TRADE_RETCODE             retcode                   = 1;  // Operation return code\n    string                         deal_id                   = 2;  // Deal id, if it is performed\n    string                         order_id                  = 3;  // Order id, if it is placed\n    double                         volume                    = 4;  // Deal volume, confirmed by broker\n    double                         price                     = 5;  // Deal price, confirmed by broker\n    double                         bid                       = 6;  // Current Bid price\n    double                         ask                       = 7;  // Current Ask price\n    string                         comment                   = 8;  // Broker comment to operation (by default it is filled by description of trade server return code)\n    string                         request_id                = 9;  // Request ID set by the client during the dispatch\n    string                         retcode_external          = 10; // Return code of an external trading system\n};\n")),Object(r.b)("h2",{id:"orders"},Object(r.b)("inlineCode",{parentName:"h2"},"Orders")),Object(r.b)("h3",{id:"order"},"Order"),Object(r.b)("p",null,"This represent the structure of an order"),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-protobuf"}),"message Order {\n    string                              order_id                        = 1;  // Order id. Unique uuid assigned to each order\n    int64                               time_setup                      = 2;  // Order setup time\n    ENUM_ORDER_TYPE                     type                            = 3;  // Order type\n    ENUM_ORDER_STATE                    state                           = 4;  // Order state\n    int64                               expiration                      = 5;  // Order expiration time\n    int64                               time_done                       = 6;  // Order execution or cancellation time\n    ENUM_ORDER_TYPE_FILLING             type_filling                    = 7;  // Order filling type\n    ENUM_ORDER_TYPE_TIME                lifetime                        = 8;  // Order lifetime\n    ENUM_ORDER_REASON                   reason                          = 9;  // The reason or source for placing an order\n    string                              position_id                     = 10; // Position identifier that is set to an order as soon as it is executed. Each executed order results in a deal that opens or modifies an already existing position. The identifier of exactly this position is set to the executed order at this moment.\n    string                              position_by_id                  = 11; // Identifier of an opposite position used for closing by order  ORDER_TYPE_CLOSE_BY\n    double                              initial_volume                  = 12; // Order initial volume\n    double                              current_volume                  = 13; // Order current volume\n    double                              price_open                      = 14; // Price specified in the order\n    double                              sl                              = 15; // Stop Loss value\n    double                              tp                              = 16; // Take Profit value\n    double                              price_current                   = 17; // The current price of the order\n    double                              price_stop_limit                = 18; // The Limit order price for the StopLimit order\n    string                              product                         = 19; // Product of the order\n    string                              venue                           = 20; // Venue of the order\n    string                              comment                         = 21; // Order comment\n    string                              external_id                     = 22; // Order identifier in an external trading system (on the Venue)\n};\n")),Object(r.b)("h3",{id:"orderrequest"},"OrderRequest"),Object(r.b)("p",null,"Interaction between the client and a trade server for executing the order operations is performed by using order requests. The order request is represented by the special predefined protobuf message of ",Object(r.b)("inlineCode",{parentName:"p"},"OrderRequest")," type, which contain all the fields necessary to perform orders. ",Object(r.b)("inlineCode",{parentName:"p"},"OrderRequest")," is used by ",Object(r.b)("a",i({parentName:"p"},{href:"orders#getorder"}),Object(r.b)("inlineCode",{parentName:"a"},"GetOrder()")),", ",Object(r.b)("a",i({parentName:"p"},{href:"orders#getpendingorders"}),Object(r.b)("inlineCode",{parentName:"a"},"GetPendingOrders()")),", ",Object(r.b)("a",i({parentName:"p"},{href:"orders#gethistoryorders"}),Object(r.b)("inlineCode",{parentName:"a"},"GetHistoryOrders()")),", ",Object(r.b)("a",i({parentName:"p"},{href:"orders#ordermodify"}),Object(r.b)("inlineCode",{parentName:"a"},"OrderModify()")),", ",Object(r.b)("a",i({parentName:"p"},{href:"orders#orderdelete"}),Object(r.b)("inlineCode",{parentName:"a"},"OrderDelete()")),". Each function uses specific fields and if not specified it uses the default value specified on ",Object(r.b)("a",i({parentName:"p"},{href:"orders"}),Object(r.b)("inlineCode",{parentName:"a"},"Orders Documentation")),". Any extra field specified that is not necessary is ignored."),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-protobuf"}),"message OrderRequest {\n    bool                           asynchronous     = 1;  // Asynchronous execution\n    string                         venue            = 2;  // Trade Venue\n    string                         product          = 3;  // Trade Product\n    double                         volume           = 4;  // Requested volume for a deal in lots\n    double                         price            = 5;  // Price\n    double                         sl               = 6;  // Stop Loss level of the order\n    double                         tp               = 7;  // Take Profit level of the order\n    double                         deviation        = 8;  // Maximal possible deviation from the requested price\n    ENUM_ORDER_TYPE_TIME           type_time        = 9;  // Order expiration type\n    int64                          expiration       = 10; // Order expiration time (for the orders of ORDER_TIME_SPECIFIED type)\n    string                         comment          = 11; // Order comment\n    int32                          limit            = 12;  // Limit of records\n};\n")),Object(r.b)("h3",{id:"orderresponse"},"OrderResponse"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"As result of a order request, a trade server returns data about the order request processing result as a special predefined protobuf message of ",Object(r.b)("inlineCode",{parentName:"p"},"OrderResponse")," type.")),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-protobuf"}),"message OrderResponse {\n    ENUM_TRADE_RETCODE             retcode                   = 1;  // Operation return code\n    repeated Order                 order                     = 2;  // Array of order structure\n    string                         comment                   = 3;  // Comment from trade server\n};\n")),Object(r.b)("h2",{id:"positions"},Object(r.b)("inlineCode",{parentName:"h2"},"Positions")),Object(r.b)("h3",{id:"position"},"Position"),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-protobuf"}),"message Position {\n    string                               position_id                     = 1;  // Position id. Unique uuid assigned to each newly opened position. It usually matches the id of an order used to open the position except when the id is changed as a result of service operations on the server, for example, when charging swaps with position re-opening. To find an order used to open a position, apply the POSITION_IDENTIFIER property.\n    int64                                open_time                       = 2;  // Position open time\n    int64                                update_time                     = 3;  // Position changing time\n    string                               identifier                      = 4;  // Position identifier is a unique number assigned to each re-opened position. It does not change throughout its life cycle and corresponds to the ticket of an order used to open a position. Check the docs for more info...\n    ENUM_POSITION_TYPE                   type                            = 5;  // Position type\n    ENUM_POSITION_REASON                 reason                          = 6;  // The reason for opening a position\n    double                               volume                          = 7;  // Position volume\n    double                               price_open                      = 8;  // Position open price\n    double                               sp                              = 9;  // Stop Loss level of opened position\n    double                               tp                              = 10; // Take Profit level of opened position\n    double                               current_price                   = 11; // Current price of the position\n    double                               swap                            = 12; // Cumulative swap\n    double                               profit                          = 13; // Current profit\n    string                               product                         = 14; // Deal product\n    string                               venue                           = 15; // Deal venue\n    string                               external_id                     = 16; // Deal identifier in an external trading system (on the Exchange\n};\n")),Object(r.b)("h3",{id:"positionsrequest"},"PositionsRequest"),Object(r.b)("p",null,"Interaction between the client and a trade server for executing the positions operations is performed by using position requests. The position request is represented by the special predefined protobuf message of ",Object(r.b)("inlineCode",{parentName:"p"},"PositionsRequest")," type, which contain all the fields necessary to perform positions operations. ",Object(r.b)("inlineCode",{parentName:"p"},"PositionsRequest")," is used by ",Object(r.b)("a",i({parentName:"p"},{href:"positions#getpositions"}),Object(r.b)("inlineCode",{parentName:"a"},"GetPositions()")),", ",Object(r.b)("a",i({parentName:"p"},{href:"positions#getopenpositions"}),Object(r.b)("inlineCode",{parentName:"a"},"GetOpenPositions()")),", ",Object(r.b)("a",i({parentName:"p"},{href:"positions#gethistorypositions"}),Object(r.b)("inlineCode",{parentName:"a"},"GetHistoryPositions()")),", ",Object(r.b)("a",i({parentName:"p"},{href:"positions#positionmodify"}),Object(r.b)("inlineCode",{parentName:"a"},"PositionModify()")),", ",Object(r.b)("a",i({parentName:"p"},{href:"positions#positionclose"}),Object(r.b)("inlineCode",{parentName:"a"},"PositionClose()")),", ",Object(r.b)("a",i({parentName:"p"},{href:"positions#positionclosepartial"}),Object(r.b)("inlineCode",{parentName:"a"},"PositionClosePartial()")),", ",Object(r.b)("a",i({parentName:"p"},{href:"positions#pospositionclosebyitionclose"}),Object(r.b)("inlineCode",{parentName:"a"},"PositionCloseBy()")),". Each function uses specific fields and if not specified it uses the default value specified on ",Object(r.b)("a",i({parentName:"p"},{href:"positions"}),Object(r.b)("inlineCode",{parentName:"a"},"Positions Documentation")),". Any extra field specified that is not necessary is ignored."),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-protobuf"}),"message PositionsRequest {\n    bool                           asynchronous     = 1;  // Asynchronous execution\n    string                         venue            = 2;  // Trade Venue\n    string                         product          = 3;  // Trade Product\n    double                         volume           = 4;  // Requested volume for a deal in lots\n    double                         price            = 5;  // Price\n    double                         sl               = 6;  // Stop Loss level of the order\n    double                         tp               = 7;  // Take Profit level of the order\n    double                         deviation        = 8;  // Maximal possible deviation from the requested price\n    ENUM_ORDER_TYPE                type             = 9;  // Order type\n    ENUM_ORDER_TYPE_FILLING        type_filling     = 10;  // Order execution type\n    ENUM_ORDER_TYPE_TIME           type_time        = 11; // Order expiration type\n    int64                          expiration       = 12; // Order expiration time (for the orders of ORDER_TIME_SPECIFIED type)\n    string                         comment          = 13; // Order comment\n    int32                          limit            = 14;  // Limit of records\n};\n")),Object(r.b)("h3",{id:"positionsresponse"},"PositionsResponse"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"As result of a position request, a trade server returns data about the position request processing result as a special predefined protobuf message of ",Object(r.b)("inlineCode",{parentName:"p"},"PositionsResponse")," type.")),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-protobuf"}),"message PositionsResponse {\n    ENUM_TRADE_RETCODE             retcode                   = 1;  // Operation return code\n    repeated Position              position                  = 2;  // Array of positions structure\n    string                         comment                   = 3;  // Comment from trade server\n};\n")),Object(r.b)("h2",{id:"deals"},Object(r.b)("inlineCode",{parentName:"h2"},"Deals")),Object(r.b)("h3",{id:"deal"},"Deal"),Object(r.b)("p",null,"This represent the structure of a deal"),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-protobuf"}),"message Deal {\n    string                               deal_id                         = 1;  // Deal id. Unique uuid assigned to each deal\n    string                               order_id                        = 2;  // Deal order id\n    int64                                time                            = 3;  // Deal time\n    ENUM_DEAL_TYPE                       type                            = 4;  // Deal type\n    ENUM_DEAL_ENTRY                      entry                           = 5;  // Deal entry - entry in, entry out, reverse\n    ENUM_DEAL_REASON                     reason                          = 6;  // The reason or source for deal execution\n    string                               position_id                     = 7;  // Identifier of a position, in the opening, modification or closing of which this deal took part. Each position has a unique identifier that is assigned to all deals executed for the symbol during the entire lifetime of the position.\n    double                               volume                          = 8;  // Deal volume\n    double                               price                           = 9;  // Deal price\n    double                               commission                      = 10; // Deal commission\n    double                               swap                            = 11; // Cumulative swap on close\n    double                               profit                          = 12; // Deal profit\n    string                               product                         = 13; // Deal product\n    string                               venue                           = 14; // Deal venue\n    string                               external_id                     = 15; // Deal identifier in an external trading system (on the Exchange\n};\n")),Object(r.b)("h3",{id:"dealrequest"},"DealRequest"),Object(r.b)("p",null,"Interaction between the client and a trade server for executing the deals operations is performed by using deal requests. The deal request is represented by the special predefined protobuf message of ",Object(r.b)("inlineCode",{parentName:"p"},"DealRequest")," type, which contain all the fields necessary to perform deals operations. ",Object(r.b)("inlineCode",{parentName:"p"},"DealRequest")," is used by ",Object(r.b)("a",i({parentName:"p"},{href:"deals#getdeal"}),Object(r.b)("inlineCode",{parentName:"a"},"GetDeal()")),", ",Object(r.b)("a",i({parentName:"p"},{href:"deals#gethistorydeals"}),Object(r.b)("inlineCode",{parentName:"a"},"GetHistoryDeals()")),". Each function uses specific fields and if not specified it uses the default value specified on ",Object(r.b)("a",i({parentName:"p"},{href:"deals"}),Object(r.b)("inlineCode",{parentName:"a"},"Deals Documentation")),". Any extra field specified that is not necessary is ignored."),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-protobuf"}),"message DealRequest {\n    string                         deal_id          = 1;  // Deal id. Unique uuid assigned to each deal\n    string                         order_id         = 2;  // Order id. Unique uuid assigned to each order\n    string                         position_id      = 3;  // Position id. Unique uuid assigned to each position\n    string                         venue            = 4;  // Deal Venue\n    string                         product          = 5;  // Deal Product\n    ENUM_ORDER_TYPE                type             = 6;  // Order type\n    int32                          limit            = 7;  // Limit of records\n};\n")),Object(r.b)("h3",{id:"dealresponse"},"DealResponse"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"As result of a deal request, a trade server returns data about the deal request processing result as a special predefined protobuf message of ",Object(r.b)("inlineCode",{parentName:"p"},"DealResponse")," type.")),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-protobuf"}),"message DealResponse {\n    ENUM_REQUEST_RETCODE           retcode                   = 1;  // Operation return code\n    repeated Deal                  deal                      = 2;  // Array of deals structure\n    string                         comment                   = 3;  // Comment from trade server\n};\n")),Object(r.b)("h2",{id:"events"},Object(r.b)("inlineCode",{parentName:"h2"},"Events")),Object(r.b)("h3",{id:"calculate"},"Calculate"),Object(r.b)("p",null,"This represent the structure of a ticker"),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-protobuf"}),"message Calculate {\n    string                             venue                               = 1;\n    string                             product                             = 2;\n    int64                              granularity                         = 3;\n    int64                              point                               = 4;\n    double                             open                                = 5;\n    double                             close                               = 6;\n    double                             high                                = 7;\n    double                             low                                 = 8;\n    double                             volume                              = 9;\n    double                             total                               = 10;\n    int64                              total_trades                        = 11;\n    int64                              buy_total                           = 12;\n    int64                              sell_total                          = 13;\n};\n")),Object(r.b)("h3",{id:"calculaterequest"},"CalculateRequest"),Object(r.b)("p",null,"This structure for request a stream of ",Object(r.b)("inlineCode",{parentName:"p"},"Calculate")),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-protobuf"}),"message CalculateRequest {\n    string                              product                           = 1;\n    string                              venue                             = 2;\n};\n")),Object(r.b)("h3",{id:"ticker"},"Ticker"),Object(r.b)("p",null,"This represent the structure of a ticker"),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-protobuf"}),"message Ticker {\n    string                              product                           = 1;\n    string                              venue                             = 2;\n    string                              last_trade_timestamp              = 3;\n    double                              last_trade_price                  = 4;\n    double                              last_trade_volume                 = 5;\n    int32                               order_side                        = 6;\n    double                              best_bid_price                    = 7;\n    double                              best_bid_volume                   = 8;\n    double                              best_ask_price                    = 9;\n    double                              best_ask_volume                   = 10;\n};\n")),Object(r.b)("h3",{id:"tickerrequest"},"TickerRequest"),Object(r.b)("p",null,"This structure for request a stream of ",Object(r.b)("inlineCode",{parentName:"p"},"Ticker")),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-protobuf"}),"message TickerRequest {\n    string                              product                           = 1;\n    string                              venue                             = 2;\n};\n")),Object(r.b)("h3",{id:"trade"},"Trade"),Object(r.b)("p",null,"This represent the structure of a ticker"),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-protobuf"}),"message Trade {\n    string                              product                           = 1;\n    string                              venue                             = 2;\n    string                              system_timestamp                  = 3;\n    string                              venue_timestamp                   = 4;\n    double                              price                             = 5;\n    double                              volume                            = 6;\n    int32                               side                              = 7;\n    string                              kind                              = 8;\n};\n")),Object(r.b)("h3",{id:"tradevenuerequest"},"TradeVenueRequest"),Object(r.b)("p",null,"This structure for request a stream of ",Object(r.b)("inlineCode",{parentName:"p"},"TradeVenueRequest")),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-protobuf"}),"message TradeVenueRequest {\n    string                              product                           = 1;\n    string                              venue                             = 2;\n};\n")),Object(r.b)("h3",{id:"orderbook"},"Orderbook"),Object(r.b)("p",null,"This represent the structure of a orderbook"),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-protobuf"}),"message Orderbook {\n    string                              product                          = 1;\n    string                              venue                            = 2;\n    string                              system_timestamp                 = 3;\n    string                              venue_timestamp                  = 4;\n    double                              last_volume                      = 5;\n    double                              last_price                       = 6;\n    repeated Item                       asks                             = 7;\n    repeated Item                       bids                             = 8;\n    string                              kind                             = 9;\n};\n\n\nmessage Item {\n    double                              volume                           = 1;\n    double                              price                            = 2;\n};\n\n")),Object(r.b)("h3",{id:"orderbookrequest"},"OrderbookRequest"),Object(r.b)("p",null,"This structure for request a stream of ",Object(r.b)("inlineCode",{parentName:"p"},"Orderbook")),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-protobuf"}),"message OrderbookRequest {\n    string                              product                           = 1;\n    string                              venue                             = 2;\n};\n")),Object(r.b)("h3",{id:"tradetransaction"},"TradeTransaction"),Object(r.b)("p",null,"When performing some definite actions on a trade account, its state changes and sends events about the changes using ",Object(r.b)("inlineCode",{parentName:"p"},"TradeTransaction")," structure"),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-protobuf"}),"message TradeTransaction {\n    string                        deal_id          = 1; // Deal id\n    string                        order_id         = 2; // Order id\n    string                        venue            = 3; // Trade venue name\n    string                        product          = 4; // Trade product name\n    ENUM_TRADE_TRANSACTION_TYPE   type             = 5; // Trade transaction type\n    ENUM_ORDER_TYPE               order_type       = 6; // Order type\n    ENUM_ORDER_STATE              order_state      = 7; // Order state\n    ENUM_DEAL_TYPE                deal_type        = 8; // Deal type\n    ENUM_ORDER_TYPE_TIME          time_type        = 9; // Order type by action period\n    int64                         time_expiration  = 10; // Order expiration time\n    double                        price            = 11; // Price\n    double                        price_trigger    = 12; // Stop limit order activation price\n    double                        price_sl         = 13; // Stop Loss level\n    double                        price_tp         = 14; // Take Profit level\n    double                        volume           = 15; // Volume\n    string                        position_id      = 16; // Position id\n    string                        position_by_id   = 17; // Position id of an opposite position\n};\n")),Object(r.b)("h3",{id:"tradetransactionrequest"},"TradeTransactionRequest"),Object(r.b)("p",null,"This structure for request a stream of ",Object(r.b)("inlineCode",{parentName:"p"},"TradeTransactionRequest")),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-protobuf"}),"message TradeTransactionRequest {\n    string                              product                           = 1;\n    string                              venue                             = 2;\n};\n")))}p.isMDXComponent=!0}}]);